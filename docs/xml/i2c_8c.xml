<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="i2c_8c" kind="file" language="C++">
    <compoundname>i2c.c</compoundname>
    <includes refid="i2c_8h" local="yes">i2c.h</includes>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="129">
        <label>mraa/i2c.h</label>
      </node>
      <node id="136">
        <label>errno.h</label>
      </node>
      <node id="135">
        <label>mqueue.h</label>
      </node>
      <node id="130">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
        <childnode refid="135" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c</label>
        <link refid="i2c_8c"/>
        <childnode refid="127" relation="include">
        </childnode>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="127">
        <label>i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="128" relation="include">
        </childnode>
        <childnode refid="129" relation="include">
        </childnode>
      </node>
      <node id="128">
        <label>pthread.h</label>
      </node>
      <node id="137">
        <label>string.h</label>
      </node>
      <node id="133">
        <label>unistd.h</label>
      </node>
      <node id="134">
        <label>semaphore.h</label>
      </node>
      <node id="131">
        <label>signal.h</label>
      </node>
      <node id="132">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="i2c_8c_1a22e6927a42a5059a3c911351a3ae84db" prot="public" static="yes" mutable="no">
        <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref> *</type>
        <definition>i2c_handle_t* my_i2c</definition>
        <argsstring></argsstring>
        <name>my_i2c</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Keep around a singleton instance of the master handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="29" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="29" bodyend="-1"/>
        <referencedby refid="i2c_8h_1a1554411301103619aa6f40b7613b5e6b" compoundref="i2c_8c" startline="202" endline="240">i2c_init</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="i2c_8c_1a60855aff2349593cbdca7dcd505847b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_set</definition>
        <argsstring>(int slave, int addr)</argsstring>
        <name>i2c_set</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="41" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="41" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_write_byte</definition>
        <argsstring>(int slave, int reg, uint8_t data)</argsstring>
        <name>i2c_write_byte</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes byte to register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_write_byte <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of register to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- data to write <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="77" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="77" bodyend="100"/>
        <referencedby refid="light_8h_1a163ea457431a4845d5ff5fa205f670b7" compoundref="light_8c" startline="537" endline="552">apds9301_power</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_write</definition>
        <argsstring>(int slave, int reg, uint16_t data)</argsstring>
        <name>i2c_write</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes data to register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_write <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of register to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- data to write <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="113" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="113" bodyend="136"/>
        <referencedby refid="light_8h_1ae2c85da2e138447c5881122669c36a38" compoundref="light_8c" startline="336" endline="340">apds9301_write_threshold_low</referencedby>
        <referencedby refid="light_8h_1adb39e9954b4d948edea845453df2abf6" compoundref="light_8c" startline="366" endline="370">apds9301_write_threshold_high</referencedby>
        <referencedby refid="temperature_8h_1acd7ca9077d8d9806394cf01abdc944e4" compoundref="temperature_8c" startline="80" endline="85">tmp102_write_config</referencedby>
        <referencedby refid="temperature_8h_1a3981b7fa33f651b8ccb69c57a367d2a6" compoundref="temperature_8c" startline="130" endline="164">tmp102_write_thigh</referencedby>
        <referencedby refid="temperature_8h_1a1f00b98eda6de0f346820505fe01d35a" compoundref="temperature_8c" startline="175" endline="209">tmp102_write_tlow</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_read</definition>
        <argsstring>(int slave, int reg, uint8_t *data, size_t len)</argsstring>
        <name>i2c_read</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Reads data from register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_read <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to location to store read data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of memory to read in bytes <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="150" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="150" bodyend="190"/>
        <referencedby refid="light_8h_1a3b06e19e8c55d93415a41352cf11de16" compoundref="light_8c" startline="255" endline="276">apds9301_set_interrupt</referencedby>
        <referencedby refid="light_8h_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" compoundref="light_8c" startline="288" endline="310">apds9301_set_gain</referencedby>
        <referencedby refid="light_8h_1a8e844b99f75ecdf6712faaaddc0eb396" compoundref="light_8c" startline="321" endline="325">apds9301_read_control</referencedby>
        <referencedby refid="light_8h_1a67500fb59f0ab2f2e46c3b6f945985b5" compoundref="light_8c" startline="351" endline="355">apds9301_read_threshold_low</referencedby>
        <referencedby refid="light_8h_1a0005300d36508d20c372b5355d6546d9" compoundref="light_8c" startline="381" endline="385">apds9301_read_threshold_high</referencedby>
        <referencedby refid="light_8h_1a6dbf3801330c345b999db86f018c94cf" compoundref="light_8c" startline="396" endline="400">apds9301_read_id</referencedby>
        <referencedby refid="light_8h_1a96f9f9c1e4e86cc148aa0a334a399d8d" compoundref="light_8c" startline="472" endline="494">apds9301_read_data0</referencedby>
        <referencedby refid="light_8h_1a342a83b7263a75c5b12bffc638b2797e" compoundref="light_8c" startline="504" endline="526">apds9301_read_data1</referencedby>
        <referencedby refid="temperature_8h_1ae8c3bd4aa2bae886c806126b137260cc" compoundref="temperature_8c" startline="96" endline="119">tmp102_get_temp</referencedby>
        <referencedby refid="temperature_8h_1a4d0f60419e315719e9ae80690a40240f" compoundref="temperature_8c" startline="220" endline="245">tmp102_read_thigh</referencedby>
        <referencedby refid="temperature_8h_1abd5568ce7a9d3c7f0c13bea9138b5bec" compoundref="temperature_8c" startline="257" endline="282">tmp102_read_tlow</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a1554411301103619aa6f40b7613b5e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_init</definition>
        <argsstring>(i2c_handle_t *i2c)</argsstring>
        <name>i2c_init</name>
        <param>
          <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref> *</type>
          <declname>i2c</declname>
        </param>
        <briefdescription>
<para>Initialize singleton master i2c context. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_init <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*i2c</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to handle to be master <heading level="1">EXIT_CLEAN on success, otherwise EXIT_INIT </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="202" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="202" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8c_1a8f550e69702cca5887035007afe36d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_stop</definition>
        <argsstring>(i2c_handle_t *i2c)</argsstring>
        <name>i2c_stop</name>
        <param>
          <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref> *</type>
          <declname>i2c</declname>
        </param>
        <briefdescription>
<para>Stops i2c instance. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_stop <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*i2c</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to i2c context handle <heading level="1">EXIT_CLEAN on success, otherwise EXIT_ERROR </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" line="252" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="252" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>=================================================================================</para><para><simplesect kind="author"><para>Roberto Baquerizo (baquerrj), <ulink url="mailto:roba8460@colorado.edu">roba8460@colorado.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2c_8h" kindref="compound">i2c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="i2c_8c_1a22e6927a42a5059a3c911351a3ae84db" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>*<ref refid="i2c_8c_1a22e6927a42a5059a3c911351a3ae84db" kindref="member">my_i2c</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>=================================================================================</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>Function:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_set</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Write<sp/>1<sp/>to<sp/>bit<sp/>at<sp/>addr</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/>slave<sp/><sp/>-<sp/>address<sp/>of<sp/>i2c<sp/>slave</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/>addr<sp/>-<sp/>memory<sp/>location<sp/>to<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>EXIT_CLEAN<sp/>on<sp/>success,<sp/>otherweise<sp/>one<sp/>of<sp/>exit_e</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>=================================================================================</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2c_set(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addr<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>master<sp/>has<sp/>not<sp/>been<sp/>initialized!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>hardware<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_lock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/>mraa_result_t<sp/>retVal<sp/>=<sp/>mraa_i2c_address(<sp/>my_i2c-&gt;context,<sp/>slave<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_write_byte(<sp/>my_i2c-&gt;context,<sp/>addr<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="i2c_8h_1acf2df3bfc71068fc8d551eed2a6e7341" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint8_t<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>master<sp/>has<sp/>not<sp/>been<sp/>initialized!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>hardware<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_lock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>mraa_result_t<sp/>retVal<sp/>=<sp/>mraa_i2c_address(<sp/>my_i2c-&gt;context,<sp/>slave<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_write_byte_data(<sp/>my_i2c-&gt;context,<sp/>data,<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="i2c_8h_1a3b5f6dfe9cedb7ea92f9076cfc25c472" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint16_t<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>master<sp/>has<sp/>not<sp/>been<sp/>initialized!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>take<sp/>hardware<sp/>mutex<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_lock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/>mraa_result_t<sp/>retVal<sp/>=<sp/>mraa_i2c_address(<sp/>my_i2c-&gt;context,<sp/>slave<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_write_word_data(<sp/>my_i2c-&gt;context,<sp/>data,<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="i2c_8h_1aeecccc19faa9d25c282c0341631b7d2f" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;I2C<sp/>master<sp/>has<sp/>not<sp/>been<sp/>initialized!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_lock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>mraa_result_t<sp/>retVal<sp/>=<sp/>mraa_i2c_address(<sp/>my_i2c-&gt;context,<sp/>slave<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>len<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_read_bytes_data(<sp/>my_i2c-&gt;context,<sp/>reg,<sp/>data,<sp/>len<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>len<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>read<sp/>all<sp/>data<sp/>from<sp/>register!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>read<sp/>one<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_read_byte_data(<sp/>my_i2c-&gt;context,<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;my_i2c-&gt;mutex<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>-1<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/><sp/>=<sp/>retVal;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="i2c_8h_1a1554411301103619aa6f40b7613b5e6b" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a1554411301103619aa6f40b7613b5e6b" kindref="member">i2c_init</ref>(<sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>*i2c<sp/>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>!=<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c<sp/>=<sp/><ref refid="i2c_8c_1a22e6927a42a5059a3c911351a3ae84db" kindref="member">my_i2c</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>!=<sp/>i2c<sp/>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i2c-&gt;context<sp/>=<sp/>mraa_i2c_init_raw(<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>i2c-&gt;context<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>master<sp/>instance:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_i2c<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>pthread_mutex_init(<sp/>&amp;i2c-&gt;mutex,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>initialize<sp/>mutex<sp/>for<sp/>I2C<sp/>master<sp/>instance:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>my_i2c<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>mraa_i2c_stop(<sp/>i2c-&gt;context<sp/>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>my_i2c<sp/>=<sp/>i2c;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="i2c_8h_1a8f550e69702cca5887035007afe36d40" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8c_1a8f550e69702cca5887035007afe36d40" kindref="member">i2c_stop</ref>(<sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>*i2c<sp/>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>my_i2c<sp/>)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>i2c<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>my_i2c<sp/>!=<sp/>i2c<sp/>)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>EBUSY<sp/><sp/>==<sp/>pthread_mutex_destroy(<sp/>&amp;i2c-&gt;mutex<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/>mraa_result_t<sp/>retVal<sp/>=<sp/>mraa_i2c_stop(<sp/>i2c-&gt;context<sp/>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mraa_result_print(<sp/>retVal<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>my_i2c<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c"/>
  </compounddef>
</doxygen>
