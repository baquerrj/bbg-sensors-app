<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="i2c_8h" kind="file" language="C++">
    <compoundname>i2c.h</compoundname>
    <includes local="no">pthread.h</includes>
    <includes local="yes">mraa/i2c.h</includes>
    <includedby refid="i2c_8c" local="yes">/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c</includedby>
    <includedby refid="light_8h" local="yes">/home/baquerrj/boulder/ecen5013/project_1/inc/light.h</includedby>
    <includedby refid="temperature_8h" local="yes">/home/baquerrj/boulder/ecen5013/project_1/inc/temperature.h</includedby>
    <incdepgraph>
      <node id="23">
        <label>mraa/i2c.h</label>
      </node>
      <node id="21">
        <label>/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>pthread.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="30">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/watchdog.c</label>
        <link refid="watchdog_8c"/>
      </node>
      <node id="27">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/light.c</label>
        <link refid="light_8c"/>
      </node>
      <node id="28">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="29">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/socket.c</label>
        <link refid="socket_8c"/>
      </node>
      <node id="25">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c</label>
        <link refid="i2c_8c"/>
      </node>
      <node id="24">
        <label>/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>/home/baquerrj/boulder/ecen5013/project_1/inc/light.h</label>
        <link refid="light_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>/home/baquerrj/boulder/ecen5013/project_1/inc/temperature.h</label>
        <link refid="temperature_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/temperature.c</label>
        <link refid="temperature_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structi2c__handle__t" prot="public">i2c_handle_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="i2c_8h_1a60855aff2349593cbdca7dcd505847b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_set</definition>
        <argsstring>(int slave, int addr)</argsstring>
        <name>i2c_set</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="44" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="41" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1acf2df3bfc71068fc8d551eed2a6e7341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_write_byte</definition>
        <argsstring>(int slave, int reg, uint8_t data)</argsstring>
        <name>i2c_write_byte</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes byte to register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_write_byte <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of register to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- data to write <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="59" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="77" bodyend="100"/>
        <referencedby refid="light_8h_1a163ea457431a4845d5ff5fa205f670b7" compoundref="light_8c" startline="537" endline="552">apds9301_power</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a3b5f6dfe9cedb7ea92f9076cfc25c472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_write</definition>
        <argsstring>(int slave, int reg, uint16_t data)</argsstring>
        <name>i2c_write</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Writes data to register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_write <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of register to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>- data to write <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="73" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="113" bodyend="136"/>
        <referencedby refid="light_8h_1ae2c85da2e138447c5881122669c36a38" compoundref="light_8c" startline="336" endline="340">apds9301_write_threshold_low</referencedby>
        <referencedby refid="light_8h_1adb39e9954b4d948edea845453df2abf6" compoundref="light_8c" startline="366" endline="370">apds9301_write_threshold_high</referencedby>
        <referencedby refid="temperature_8h_1acd7ca9077d8d9806394cf01abdc944e4" compoundref="temperature_8c" startline="80" endline="85">tmp102_write_config</referencedby>
        <referencedby refid="temperature_8h_1a3981b7fa33f651b8ccb69c57a367d2a6" compoundref="temperature_8c" startline="130" endline="164">tmp102_write_thigh</referencedby>
        <referencedby refid="temperature_8h_1a1f00b98eda6de0f346820505fe01d35a" compoundref="temperature_8c" startline="175" endline="209">tmp102_write_tlow</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1aeecccc19faa9d25c282c0341631b7d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_read</definition>
        <argsstring>(int slave, int reg, uint8_t *data, size_t len)</argsstring>
        <name>i2c_read</name>
        <param>
          <type>int</type>
          <declname>slave</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Reads data from register address. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_read <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>slave</parametername>
</parameternamelist>
<parameterdescription>
<para>- address of i2c slave </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>- address to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to location to store read data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>- size of memory to read in bytes <heading level="1">EXIT_CLEAN on success, otherwise one of exit_e </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="87" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="150" bodyend="190"/>
        <referencedby refid="light_8h_1a3b06e19e8c55d93415a41352cf11de16" compoundref="light_8c" startline="255" endline="276">apds9301_set_interrupt</referencedby>
        <referencedby refid="light_8h_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" compoundref="light_8c" startline="288" endline="310">apds9301_set_gain</referencedby>
        <referencedby refid="light_8h_1a8e844b99f75ecdf6712faaaddc0eb396" compoundref="light_8c" startline="321" endline="325">apds9301_read_control</referencedby>
        <referencedby refid="light_8h_1a67500fb59f0ab2f2e46c3b6f945985b5" compoundref="light_8c" startline="351" endline="355">apds9301_read_threshold_low</referencedby>
        <referencedby refid="light_8h_1a0005300d36508d20c372b5355d6546d9" compoundref="light_8c" startline="381" endline="385">apds9301_read_threshold_high</referencedby>
        <referencedby refid="light_8h_1a6dbf3801330c345b999db86f018c94cf" compoundref="light_8c" startline="396" endline="400">apds9301_read_id</referencedby>
        <referencedby refid="light_8h_1a96f9f9c1e4e86cc148aa0a334a399d8d" compoundref="light_8c" startline="472" endline="494">apds9301_read_data0</referencedby>
        <referencedby refid="light_8h_1a342a83b7263a75c5b12bffc638b2797e" compoundref="light_8c" startline="504" endline="526">apds9301_read_data1</referencedby>
        <referencedby refid="temperature_8h_1ae8c3bd4aa2bae886c806126b137260cc" compoundref="temperature_8c" startline="96" endline="119">tmp102_get_temp</referencedby>
        <referencedby refid="temperature_8h_1a4d0f60419e315719e9ae80690a40240f" compoundref="temperature_8c" startline="220" endline="245">tmp102_read_thigh</referencedby>
        <referencedby refid="temperature_8h_1abd5568ce7a9d3c7f0c13bea9138b5bec" compoundref="temperature_8c" startline="257" endline="282">tmp102_read_tlow</referencedby>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a1554411301103619aa6f40b7613b5e6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_init</definition>
        <argsstring>(i2c_handle_t *i2c)</argsstring>
        <name>i2c_init</name>
        <param>
          <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref> *</type>
          <declname>i2c</declname>
        </param>
        <briefdescription>
<para>Initialize singleton master i2c context. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_init <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*i2c</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to handle to be master <heading level="1">EXIT_CLEAN on success, otherwise EXIT_INIT </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="98" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="202" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="i2c_8h_1a8f550e69702cca5887035007afe36d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int i2c_stop</definition>
        <argsstring>(i2c_handle_t *i2c)</argsstring>
        <name>i2c_stop</name>
        <param>
          <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref> *</type>
          <declname>i2c</declname>
        </param>
        <briefdescription>
<para>Stops i2c instance. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: i2c_stop <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*i2c</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to i2c context handle <heading level="1">EXIT_CLEAN on success, otherwise EXIT_ERROR </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h" line="109" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/i2c.c" bodystart="252" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to I2C Bus of BeagleBone Green using libmraa <ulink url="https://iotdk.intel.com/docs/master/mraa/">https://iotdk.intel.com/docs/master/mraa/</ulink>. </para>    </briefdescription>
    <detaileddescription>
<para>=================================================================================</para><para><simplesect kind="author"><para>Roberto Baquerizo (baquerrj), <ulink url="mailto:roba8460@colorado.edu">roba8460@colorado.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#ifndef<sp/><sp/>I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pthread.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mraa/i2c.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="structi2c__handle__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/>mraa_i2c_context<sp/>context;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>pthread_mutex_t<sp/><sp/>mutex;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}<sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>=================================================================================</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>Function:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_set</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Write<sp/>1<sp/>to<sp/>bit<sp/>at<sp/>addr</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/>slave<sp/><sp/>-<sp/>address<sp/>of<sp/>i2c<sp/>slave</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>@param<sp/><sp/><sp/>addr<sp/>-<sp/>memory<sp/>location<sp/>to<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>@return<sp/><sp/>EXIT_CLEAN<sp/>on<sp/>success,<sp/>otherweise<sp/>one<sp/>of<sp/>exit_e</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>=================================================================================</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i2c_set(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addr<sp/>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint8_t<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint16_t<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>slave,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg,<sp/>uint8_t<sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a1554411301103619aa6f40b7613b5e6b" kindref="member">i2c_init</ref>(<sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>*i2c<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="i2c_8h_1a8f550e69702cca5887035007afe36d40" kindref="member">i2c_stop</ref>(<sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>*i2c<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>I2C_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/baquerrj/boulder/ecen5013/project_1/inc/i2c.h"/>
  </compounddef>
</doxygen>
