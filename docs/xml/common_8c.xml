<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="common_8c" kind="file" language="C++">
    <compoundname>common.c</compoundname>
    <includes refid="common_8h" local="yes">common.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/syscall.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <incdepgraph>
      <node id="124">
        <label>sys/stat.h</label>
      </node>
      <node id="122">
        <label>sys/mman.h</label>
      </node>
      <node id="119">
        <label>stdlib.h</label>
      </node>
      <node id="116">
        <label>errno.h</label>
      </node>
      <node id="120">
        <label>fcntl.h</label>
      </node>
      <node id="115">
        <label>mqueue.h</label>
      </node>
      <node id="109">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/common.c</label>
        <link refid="common_8c"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
      </node>
      <node id="112">
        <label>pthread.h</label>
      </node>
      <node id="123">
        <label>sys/types.h</label>
      </node>
      <node id="117">
        <label>string.h</label>
      </node>
      <node id="113">
        <label>unistd.h</label>
      </node>
      <node id="114">
        <label>semaphore.h</label>
      </node>
      <node id="110">
        <label>signal.h</label>
      </node>
      <node id="118">
        <label>time.h</label>
      </node>
      <node id="121">
        <label>sys/syscall.h</label>
      </node>
      <node id="111">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_header</definition>
        <argsstring>(char *buffer)</argsstring>
        <name>print_header</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Write a string formatted with the TID of the thread calling this function and a timestamp to the log buffer. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: print_header <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to where we should copy formatted string to if NULL, we print to stderr <heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="35" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="35" bodyend="58"/>
        <referencedby refid="light_8h_1a1a3ec39083c9a030ae43f0e8bd3ea71d" compoundref="light_8c" startline="662" endline="712">light_fn</referencedby>
        <referencedby refid="socket_8h_1a94c4f68644ffd04fff83f946dae4d59c" compoundref="socket_8c" startline="229" endline="292">socket_init</referencedby>
        <referencedby refid="temperature_8h_1ae0afede2f0dcd1931da5bed09ae70cd4" compoundref="temperature_8c" startline="462" endline="503">temperature_fn</referencedby>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void thread_exit</definition>
        <argsstring>(int exit_status)</argsstring>
        <name>thread_exit</name>
        <param>
          <type>int</type>
          <declname>exit_status</declname>
        </param>
        <briefdescription>
<para>Common exit point for all threads. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: thread_exit <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exit_status</parametername>
</parameternamelist>
<parameterdescription>
<para>- reason for exit (signal number) <heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="60" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="60" bodyend="80"/>
        <referencedby refid="logger_8c_1a366471b5822de7615f33cbe5eab9726a" compoundref="logger_8c" startline="52" endline="65">sig_handler</referencedby>
        <referencedby refid="socket_8h_1aa92c508deb9f9da37d03c119f834f0d9" compoundref="socket_8c" startline="305" endline="333">socket_fn</referencedby>
      </memberdef>
      <memberdef kind="function" id="common_8c_1ae426f169cff2eb748a7d509bda02c686" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* get_shared_memory</definition>
        <argsstring>(void)</argsstring>
        <name>get_shared_memory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets up shared memory location for logging. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: get_shared_memory <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">*shm_p - pointer to shared memory object </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="82" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="82" bodyend="128"/>
        <referencedby refid="light_8h_1a1a3ec39083c9a030ae43f0e8bd3ea71d" compoundref="light_8c" startline="662" endline="712">light_fn</referencedby>
        <referencedby refid="socket_8h_1aa92c508deb9f9da37d03c119f834f0d9" compoundref="socket_8c" startline="305" endline="333">socket_fn</referencedby>
        <referencedby refid="temperature_8h_1ae0afede2f0dcd1931da5bed09ae70cd4" compoundref="temperature_8c" startline="462" endline="503">temperature_fn</referencedby>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a8e1ee6092ec482d5556b2100d64b8c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int sems_init</definition>
        <argsstring>(shared_data_t *shm)</argsstring>
        <name>sems_init</name>
        <param>
          <type><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref> *</type>
          <declname>shm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: sems_init  Initialize semaphores for shared memory</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*shm</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to shared memory object <heading level="1">EXIT_CLEAN if successful, otherwise EXIT_INIT </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="131" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="131" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a78dd395e9020e2a6066233a529bff7be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int timer_setup</definition>
        <argsstring>(timer_t *id, void(*handler)(union sigval))</argsstring>
        <name>timer_setup</name>
        <param>
          <type>timer_t *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>void(*)(union sigval)</type>
          <declname>timer_handler</declname>
          <defname>handler</defname>
        </param>
        <briefdescription>
<para>Initializes a timer identified by timer_t id. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: timer_setup <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*id</parametername>
</parameternamelist>
<parameterdescription>
<para>- identifier for new timer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*handler</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to function to register as the handler for the timer ticks <heading level="1">EXIT_CLEAN if successful, otherwise EXIT_INIT </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="155" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="155" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="common_8c_1a207644f53334379d5fcb82b78bafff36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int timer_start</definition>
        <argsstring>(timer_t *id, unsigned long usecs)</argsstring>
        <name>timer_start</name>
        <param>
          <type>timer_t *</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>usecs</declname>
        </param>
        <briefdescription>
<para>Starts the timer with interval usecs. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: timer_start <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*id</parametername>
</parameternamelist>
<parameterdescription>
<para>- identifier for new timer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>usecs</parametername>
</parameternamelist>
<parameterdescription>
<para>- timer interval <heading level="1">EXIT_CLEAN if successful, otherwise EXIT_INIT </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" line="180" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/common.c" bodystart="180" bodyend="200"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines types and functions common between the threads of the application. </para>    </briefdescription>
    <detaileddescription>
<para>=================================================================================</para><para><simplesect kind="author"><para>Roberto Baquerizo (baquerrj), <ulink url="mailto:roba8460@colorado.edu">roba8460@colorado.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="21"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/syscall.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="common_8h_1a8f714d490a7f06c3a43cfea239e2770f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer<sp/>)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>time;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;time);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n=====================================================\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>[%d]:<sp/>%ld.%ld<sp/>secs\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pid_t)syscall(SYS_gettid),<sp/>time.tv_sec,<sp/>time.tv_nsec<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(<sp/>stderr<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>!=<sp/>buffer<sp/>)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp[100]<sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\n=====================================================\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmp2[100];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>tmp2,<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>[%d]:<sp/>%ld.%ld<sp/>secs\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pid_t)syscall(SYS_gettid),<sp/>time.tv_sec,<sp/>time.tv_nsec<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcat(<sp/>tmp,<sp/>tmp2<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(<sp/>buffer,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="common_8h_1a760f8eb17501e01a6673e2ec911ba1cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>exit_status<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>time;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;time);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>exit_status<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGUSR1:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stdout,<sp/></highlight><highlight class="stringliteral">&quot;Caught<sp/>SIGUSR1<sp/>Signal!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SIGUSR2:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stdout,<sp/></highlight><highlight class="stringliteral">&quot;Caught<sp/>SIGUSR2<sp/>Signal!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>fprintf(<sp/>stdout,<sp/></highlight><highlight class="stringliteral">&quot;Goodbye<sp/>World!<sp/>End<sp/>Time:<sp/>%ld.%ld<sp/>secs\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.tv_sec,<sp/>time.tv_nsec<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>pthread_exit(EXIT_SUCCESS);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="common_8h_1ae426f169cff2eb748a7d509bda02c686" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="common_8c_1ae426f169cff2eb748a7d509bda02c686" kindref="member">get_shared_memory</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">shared_data<sp/>*shm_p;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shm_fd<sp/>=<sp/>shm_open(<sp/>SHM_SEGMENT_NAME,<sp/>O_CREAT<sp/>|<sp/>O_EXCL<sp/>|<sp/>O_RDWR,<sp/>0666<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>shm_fd<sp/>)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EEXIST<sp/>==<sp/>errnum<sp/>)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Already<sp/>exists:<sp/>open<sp/>again<sp/>without<sp/>O_CREAT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shm_fd<sp/>=<sp/>shm_open(SHM_SEGMENT_NAME,<sp/>O_RDWR,<sp/>0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>opening<sp/>shared<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stdout,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>shared<sp/>memory<sp/>and<sp/>setting<sp/>size<sp/>to<sp/>%u<sp/>bytes\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>ftruncate(<sp/>shm_fd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>))<sp/>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>setting<sp/>size<sp/>of<sp/>shared<sp/>memroy:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Map<sp/>the<sp/>shared<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>shm_p<sp/>=<sp/>mmap(NULL,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>),<sp/>PROT_READ<sp/>|<sp/>PROT_WRITE,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAP_SHARED,<sp/>shm_fd,<sp/>0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>shm_p<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>memory<sp/>mapping<sp/>shared<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(EXIT_FAILURE);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shm_p;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="common_8h_1a8e1ee6092ec482d5556b2100d64b8c74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a8e1ee6092ec482d5556b2100d64b8c74" kindref="member">sems_init</ref>(<sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>*shm<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>sem_init(<sp/>&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>,<sp/>1,<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>initializing<sp/>write<sp/>semaphore:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>sem_init(<sp/>&amp;shm-&gt;r_sem,<sp/>1,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>initializing<sp/>read<sp/>semaphore:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="common_8h_1a7bc3784d4fdb323e1761a141c72d2f49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a78dd395e9020e2a6066233a529bff7be" kindref="member">timer_setup</ref>(<sp/>timer_t<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*handler)(</highlight><highlight class="keyword">union</highlight><highlight class="normal"><sp/>sigval)<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>timer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigevent<sp/>sev;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>memset(&amp;sev,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sigevent));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>sev.sigev_notify<sp/>=<sp/>SIGEV_THREAD;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>sev.sigev_notify_function<sp/>=<sp/>handler;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>sev.sigev_value.sival_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>sev.sigev_notify_attributes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>timer_create(<sp/>CLOCK_REALTIME,<sp/>&amp;sev,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>creating<sp/>new<sp/>timer:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="common_8h_1a207644f53334379d5fcb82b78bafff36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="common_8c_1a207644f53334379d5fcb82b78bafff36" kindref="member">timer_start</ref>(<sp/>timer_t<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>usecs<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">itimerspec<sp/>trigger;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/>trigger.it_value.tv_sec<sp/>=<sp/>usecs<sp/>/<sp/>MICROS_PER_SEC;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/>trigger.it_value.tv_nsec<sp/>=<sp/>(<sp/>usecs<sp/>%<sp/>MICROS_PER_SEC<sp/>)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/>trigger.it_interval.tv_sec<sp/>=<sp/>trigger.it_value.tv_sec;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/>trigger.it_interval.tv_nsec<sp/>=<sp/>trigger.it_value.tv_nsec;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/>timer_settime(<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>0,<sp/>&amp;trigger,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>starting<sp/>new<sp/>timer:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_INIT;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/baquerrj/boulder/ecen5013/project_1/src/common.c"/>
  </compounddef>
</doxygen>
