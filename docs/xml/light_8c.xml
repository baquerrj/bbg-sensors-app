<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="light_8c" kind="file" language="C++">
    <compoundname>light.c</compoundname>
    <includes refid="watchdog_8h" local="yes">watchdog.h</includes>
    <includes refid="light_8h" local="yes">light.h</includes>
    <includes refid="led_8h" local="yes">led.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="146">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/light.c</label>
        <link refid="light_8c"/>
        <childnode refid="147" relation="include">
        </childnode>
        <childnode refid="155" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="157">
        <label>mraa/i2c.h</label>
      </node>
      <node id="147">
        <label>watchdog.h</label>
        <link refid="watchdog_8h"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="159">
        <label>errno.h</label>
      </node>
      <node id="154">
        <label>mqueue.h</label>
      </node>
      <node id="148">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="149" relation="include">
        </childnode>
        <childnode refid="150" relation="include">
        </childnode>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="152" relation="include">
        </childnode>
        <childnode refid="153" relation="include">
        </childnode>
        <childnode refid="154" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>i2c.h</label>
        <link refid="i2c_8h"/>
        <childnode refid="151" relation="include">
        </childnode>
        <childnode refid="157" relation="include">
        </childnode>
      </node>
      <node id="155">
        <label>light.h</label>
        <link refid="light_8h"/>
        <childnode refid="148" relation="include">
        </childnode>
        <childnode refid="156" relation="include">
        </childnode>
      </node>
      <node id="151">
        <label>pthread.h</label>
      </node>
      <node id="161">
        <label>string.h</label>
      </node>
      <node id="152">
        <label>unistd.h</label>
      </node>
      <node id="153">
        <label>semaphore.h</label>
      </node>
      <node id="149">
        <label>signal.h</label>
      </node>
      <node id="160">
        <label>time.h</label>
      </node>
      <node id="162">
        <label>math.h</label>
      </node>
      <node id="150">
        <label>stdio.h</label>
      </node>
      <node id="158">
        <label>led.h</label>
        <link refid="led_8h"/>
        <childnode refid="150" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="light_8c_1a7c22bf62313ce4f2bbe148ca7ba2abd3" prot="public" static="yes" mutable="no">
        <type>timer_t</type>
        <definition>timer_t timerid</definition>
        <argsstring></argsstring>
        <name>timerid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="31" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="light_8c_1a3dfce1828c167eae81a00615b18296df" prot="public" static="no" mutable="no">
        <type>struct itimerspec</type>
        <definition>struct itimerspec trigger</definition>
        <argsstring></argsstring>
        <name>trigger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="31" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="light_8c_1a98be0c2951e1b0d2613e16324c8e569c" prot="public" static="yes" mutable="no">
        <type><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref></type>
        <definition>i2c_handle_t i2c_apds9301</definition>
        <argsstring></argsstring>
        <name>i2c_apds9301</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="34" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="light_8c_1a9619c20b05cd6ad35d7ff8651cc29a7e" prot="public" static="yes" mutable="no">
        <type>float</type>
        <definition>float last_lux_value</definition>
        <argsstring></argsstring>
        <name>last_lux_value</name>
        <initializer>= -5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="35" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="light_8c_1a65781390ecf1a5a022a3dfe0bc13b8cb" prot="public" static="yes" mutable="no">
        <type>mqd_t</type>
        <definition>mqd_t light_queue</definition>
        <argsstring></argsstring>
        <name>light_queue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="36" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="light_8c_1a0595a9426215e130f99f34805ad48965" prot="public" static="yes" mutable="no">
        <type><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref> *</type>
        <definition>shared_data_t* shm</definition>
        <argsstring></argsstring>
        <name>shm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="37" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="light_8c_1a366471b5822de7615f33cbe5eab9726a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sig_handler</definition>
        <argsstring>(int signo)</argsstring>
        <name>sig_handler</name>
        <param>
          <type>int</type>
          <declname>signo</declname>
        </param>
        <briefdescription>
<para>Signal handler for light sensor thread. On normal operation, we should be receving SIGUSR1/2 signals from watchdog when prompted to exit. So, we close the message queue and timer this thread owns. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: sig_handler <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signo</parametername>
</parameternamelist>
<parameterdescription>
<para>- enum with signal number of signal being handled <heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="50" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="50" bodyend="71"/>
        <referencedby refid="light_8h_1a1a3ec39083c9a030ae43f0e8bd3ea71d" compoundref="light_8c" startline="662" endline="712">light_fn</referencedby>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a4f3aa3fb3750262d938e191252db81fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void timer_handler</definition>
        <argsstring>(union sigval sig)</argsstring>
        <name>timer_handler</name>
        <param>
          <type>union sigval</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Timer handler function for light sensor thread When woken up by the timer, get lux reading and write state to shared memory. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: timer_handler <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="83" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="83" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a7f1c59e171c9db2a7609a4cd8b61fa2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float get_lux</definition>
        <argsstring>(void)</argsstring>
        <name>get_lux</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns last lux reading. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: get_lux <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">last_lux_value - last lux reading we have </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="129" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a5ba3d2c92432bf82f3f3cc4e809b1dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int is_dark</definition>
        <argsstring>(void)</argsstring>
        <name>is_dark</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns int speciyfing if it is night or day. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: is_dark <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">night - 0 if it is day, 1 if night, i.e. below DARK_THRESHOLD </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="144" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="144" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1ac3c04aef00858dc27815e190f8186cfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_set_config</definition>
        <argsstring>(void)</argsstring>
        <name>apds9301_set_config</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set configuration of light sensor. For the APDS9301, the configuration is spread out across the: Timing Register, Interrupt Control Register, and Control Register. So, I have to write to all of these to set the config. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_set_config <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">EXIT_CLEAN if successful, otherwise see <ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="165" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="165" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a99e9814d23261d099bf5d381d84d6642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_set_integration</definition>
        <argsstring>(uint8_t val)</argsstring>
        <name>apds9301_set_integration</name>
        <param>
          <type>uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Sets the integration time for APDS9301 by writing a value to bits INTEG of the Timing Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_set_integration <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>- value to write to timing register <heading level="1">see <ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte()</ref> - if val is not an allowed value, EXIT_ERROR </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="201" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="201" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a145d5bf45a3d1527eaa860a2a4ce545b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_clear_interrupt</definition>
        <argsstring>(void)</argsstring>
        <name>apds9301_clear_interrupt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears any pending interrupt for APDS9301 by writing a 1 to the CLEAR bit of the Command Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_clear_interrupt <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">see i2c_set() </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="235" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="235" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a3b06e19e8c55d93415a41352cf11de16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_set_interrupt</definition>
        <argsstring>(uint8_t enable)</argsstring>
        <name>apds9301_set_interrupt</name>
        <param>
          <type>uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables or disables interrupts for APDS9301 by setting or clearing the INTR bits of the Interrupt Control Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_set_interrupt <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>- set if we want to enable interrupts <heading level="1">see <ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="255" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="255" bodyend="276"/>
        <referencedby refid="light_8h_1ac3c04aef00858dc27815e190f8186cfd" compoundref="light_8c" startline="165" endline="189">apds9301_set_config</referencedby>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_set_gain</definition>
        <argsstring>(uint8_t gain)</argsstring>
        <name>apds9301_set_gain</name>
        <param>
          <type>uint8_t</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Sets gain for APDS9301 by setting or clearing the GAIN bit of the Timing Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_set_gain <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>- set if we want high gain <heading level="1">see <ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="288" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="288" bodyend="310"/>
        <referencedby refid="light_8h_1ac3c04aef00858dc27815e190f8186cfd" compoundref="light_8c" startline="165" endline="189">apds9301_set_config</referencedby>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a8e844b99f75ecdf6712faaaddc0eb396" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_control</definition>
        <argsstring>(uint8_t *data)</argsstring>
        <name>apds9301_read_control</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read contents of Control Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_read_control <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>- where to store contents <heading level="1">see <ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="321" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="321" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1ae2c85da2e138447c5881122669c36a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_write_threshold_low</definition>
        <argsstring>(uint16_t threshold)</argsstring>
        <name>apds9301_write_threshold_low</name>
        <param>
          <type>uint16_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Write value to low threshold register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_write_threshold_low <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>- value to write <heading level="1">see <ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="336" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a67500fb59f0ab2f2e46c3b6f945985b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_threshold_low</definition>
        <argsstring>(uint16_t *threshold)</argsstring>
        <name>apds9301_read_threshold_low</name>
        <param>
          <type>uint16_t *</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Read value from low threshold register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_write_threshold_low <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>- where to write value read <heading level="1">see <ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="351" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="351" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1adb39e9954b4d948edea845453df2abf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_write_threshold_high</definition>
        <argsstring>(uint16_t threshold)</argsstring>
        <name>apds9301_write_threshold_high</name>
        <param>
          <type>uint16_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Write value to high threshold register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_write_threshold_high <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>- value to write <heading level="1">see <ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="366" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="366" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a0005300d36508d20c372b5355d6546d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_threshold_high</definition>
        <argsstring>(uint16_t *threshold)</argsstring>
        <name>apds9301_read_threshold_high</name>
        <param>
          <type>uint16_t *</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Read value from high threshold register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_write_threshold_high <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>- where to write value read <heading level="1">see <ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="381" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="381" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a6dbf3801330c345b999db86f018c94cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_id</definition>
        <argsstring>(uint8_t *id)</argsstring>
        <name>apds9301_read_id</name>
        <param>
          <type>uint8_t *</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Read APDS9301 Identification Register. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_read_id <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*id</parametername>
</parameternamelist>
<parameterdescription>
<para>- where to write ID from register <heading level="1">see <ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="396" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="396" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a14680b863ba54159dba03357d4745a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_get_lux</definition>
        <argsstring>(float *lux)</argsstring>
        <name>apds9301_get_lux</name>
        <param>
          <type>float *</type>
          <declname>lux</declname>
        </param>
        <briefdescription>
<para>Read ADC Registers and calculate lux in lumen using equations from APDS9301 datasheet. </para>        </briefdescription>
        <detaileddescription>
<para>Read ADC Registers and calculate lux in lumen.</para><para>================================================================================= Function: apds9301_get_lux <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*lux</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to location to write decoded lux to <heading level="1">EXIT_CLEAN if successful, otherwise EXIT_ERROR </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="412" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="412" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a96f9f9c1e4e86cc148aa0a334a399d8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_data0</definition>
        <argsstring>(uint16_t *data)</argsstring>
        <name>apds9301_read_data0</name>
        <param>
          <type>uint16_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read ADC register for channel 0. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= function: apds9301_read_data0 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to location to write decoded value to <heading level="1">EXIT_CLEAN if successful, otherwise exit_error </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="472" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="472" bodyend="494"/>
        <referencedby refid="light_8h_1a14680b863ba54159dba03357d4745a16" compoundref="light_8c" startline="412" endline="461">apds9301_get_lux</referencedby>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a342a83b7263a75c5b12bffc638b2797e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_read_data1</definition>
        <argsstring>(uint16_t *data)</argsstring>
        <name>apds9301_read_data1</name>
        <param>
          <type>uint16_t *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Read ADC register for channel 1. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= function: apds9301_read_data1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>*data</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to location to write decoded value to <heading level="1">EXIT_CLEAN if successful, otherwise exit_error </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="504" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="504" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a163ea457431a4845d5ff5fa205f670b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int apds9301_power</definition>
        <argsstring>(uint16_t on)</argsstring>
        <name>apds9301_power</name>
        <param>
          <type>uint16_t</type>
          <declname>on</declname>
        </param>
        <briefdescription>
<para>power on (or off) APDS9301 as set by paramater </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: apds9301_power <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>on</parametername>
</parameternamelist>
<parameterdescription>
<para>- specifies if sensor is to be powered on or off <heading level="1">see <ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte()</ref> </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="537" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="537" bodyend="552"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a17b9e7a92cacdbc3b7220d968b204525" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void cycle</definition>
        <argsstring>(void)</argsstring>
        <name>cycle</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Cycle function for light sensor thread We wait in this while loop checking for requests from watchdog for health status. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: cycle <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="565" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="565" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a57d6c7de6874cb33b372559ea24ebb85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>mqd_t</type>
        <definition>mqd_t get_light_queue</definition>
        <argsstring>(void)</argsstring>
        <name>get_light_queue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get file descriptor for light sensor thread. Called by watchdog thread in order to be able to send heartbeat check via queue. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: get_light_queue <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">temp_queue - file descriptor for light sensor thread message queue </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="614" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1abafa0fdb40560c48e4b98ec10f0e1f43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int light_queue_init</definition>
        <argsstring>(void)</argsstring>
        <name>light_queue_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize message queue for light sensor thread. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: light_queue_init <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>void</parametername>
</parameternamelist>
<parameterdescription>
<para><heading level="1">msg_q - file descriptor for initialized message queue </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="628" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="628" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="light_8c_1a1a3ec39083c9a030ae43f0e8bd3ea71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* light_fn</definition>
        <argsstring>(void *thread_args)</argsstring>
        <name>light_fn</name>
        <param>
          <type>void *</type>
          <declname>thread_args</declname>
        </param>
        <briefdescription>
<para>Entry point for light sensor processing thread. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: light_fn <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_args</parametername>
</parameternamelist>
<parameterdescription>
<para>- void ptr to arguments used to initialize thread </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL - We don&apos;t really exit from this function, <heading level="1">since the exit point is <ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit()</ref> </heading>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" line="662" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/light.c" bodystart="662" bodyend="712"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface to APDS9301 Light Sensor. </para>    </briefdescription>
    <detaileddescription>
<para>=================================================================================</para><para>&lt;+DETAILED+&gt;</para><para><simplesect kind="author"><para>Roberto Baquerizo (baquerrj), <ulink url="mailto:roba8460@colorado.edu">roba8460@colorado.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="watchdog_8h" kindref="compound">watchdog.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="light_8h" kindref="compound">light.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="led_8h" kindref="compound">led.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>timer_t<sp/><sp/><sp/><sp/>timerid;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">itimerspec<sp/>trigger;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structi2c__handle__t" kindref="compound">i2c_handle_t</ref><sp/>i2c_apds9301;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>last_lux_value<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>mqd_t<sp/>light_queue;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>*shm;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="light_8c_1a366471b5822de7615f33cbe5eab9726a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>signo<sp/>==<sp/>SIGUSR1<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Received<sp/>SIGUSR1!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mq_close(<sp/>light_queue<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timer_delete(<sp/>timerid<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="light_8c_1a163ea457431a4845d5ff5fa205f670b7" kindref="member">apds9301_power</ref>(<sp/>POWER_OFF<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a8f550e69702cca5887035007afe36d40" kindref="member">i2c_stop</ref>(<sp/>&amp;i2c_apds9301<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>signo<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>signo<sp/>==<sp/>SIGUSR2<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Received<sp/>SIGUSR2!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mq_close(<sp/>light_queue<sp/>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timer_delete(<sp/>timerid<sp/>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="light_8c_1a163ea457431a4845d5ff5fa205f670b7" kindref="member">apds9301_power</ref>(<sp/>POWER_OFF<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="i2c_8c_1a8f550e69702cca5887035007afe36d40" kindref="member">i2c_stop</ref>(<sp/>&amp;i2c_apds9301<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>signo<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="light_8c_1a4f3aa3fb3750262d938e191252db81fb" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a4f3aa3fb3750262d938e191252db81fb" kindref="member">timer_handler</ref>(<sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"><sp/>sigval<sp/>sig<sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><ref refid="led_8c_1ad5a256395c8cd67d2a9f9ff1abfd6d2a" kindref="member">led_toggle</ref>(<sp/>LED1_BRIGHTNESS<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>lux<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a14680b863ba54159dba03357d4745a16" kindref="member">apds9301_get_lux</ref>(<sp/>&amp;lux<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>save<sp/>new<sp/>lux<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_lux_value<sp/>=<sp/>lux;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>DARK_THRESHOLD<sp/>&gt;<sp/>lux<sp/>)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;cycle[%d]:<sp/>State:<sp/>%s,<sp/>Lux:<sp/>%0.5f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;NIGHT&quot;</highlight><highlight class="normal">,<sp/>lux<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;cycle[%d]:<sp/>State:<sp/>%s,<sp/>Lux:<sp/>%0.5f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,<sp/></highlight><highlight class="stringliteral">&quot;DAY&quot;</highlight><highlight class="normal">,<sp/>lux<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;cycle[%d]:<sp/>could<sp/>not<sp/>get<sp/>light<sp/>reading!\n&quot;</highlight><highlight class="normal">,<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><ref refid="led_8c_1ad5a256395c8cd67d2a9f9ff1abfd6d2a" kindref="member">led_toggle</ref>(<sp/>LED1_BRIGHTNESS<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="light_8h_1a7f1c59e171c9db2a7609a4cd8b61fa2c" refkind="member"><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a7f1c59e171c9db2a7609a4cd8b61fa2c" kindref="member">get_lux</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_lux_value;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="light_8h_1a5ba3d2c92432bf82f3f3cc4e809b1dba" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a5ba3d2c92432bf82f3f3cc4e809b1dba" kindref="member">is_dark</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dark<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>DARK_THRESHOLD<sp/>&gt;<sp/>last_lux_value<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dark<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dark;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="light_8h_1ac3c04aef00858dc27815e190f8186cfd" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1ac3c04aef00858dc27815e190f8186cfd" kindref="member">apds9301_set_config</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" kindref="member">apds9301_set_gain</ref>(<sp/><ref refid="light_8h_1ae242ab0e0a91e95de561944085dbdf20" kindref="member">DEFAULT_GAIN</ref><sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a3b06e19e8c55d93415a41352cf11de16" kindref="member">apds9301_set_interrupt</ref>(<sp/>DEFAULT_INTERRUPT<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a99e9814d23261d099bf5d381d84d6642" kindref="member">apds9301_set_integration</ref>(<sp/>DEFAULT_INTEGRATION_TIME<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="light_8h_1a99e9814d23261d099bf5d381d84d6642" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a99e9814d23261d099bf5d381d84d6642" kindref="member">apds9301_set_integration</ref>(<sp/>uint8_t<sp/>val<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>3<sp/>&lt;<sp/>val<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>invalid<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>data;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TIME,<sp/>&amp;data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>data<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>data<sp/>&amp;=<sp/>~(0b11);<sp/><sp/></highlight><highlight class="comment">/*<sp/>clears<sp/>lower<sp/>2<sp/>bits<sp/>of<sp/>TIMING<sp/>REG<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>data<sp/>|=<sp/>val;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TIME,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="light_8h_1a145d5bf45a3d1527eaa860a2a4ce545b" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a145d5bf45a3d1527eaa860a2a4ce545b" kindref="member">apds9301_clear_interrupt</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="236"><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>clear<sp/>=<sp/><ref refid="light_8h_1ac2e33218e7b5df546d974d0c766d8b0b" kindref="member">APDS9301_REG_CMD</ref><sp/>|<sp/>CMD_CLEAR_INTR;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>i2c_set(<sp/>APDS9301_ADDRESS,<sp/>clear<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="light_8h_1a3b06e19e8c55d93415a41352cf11de16" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a3b06e19e8c55d93415a41352cf11de16" kindref="member">apds9301_set_interrupt</ref>(<sp/>uint8_t<sp/>enable<sp/>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>data;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_INT_CNTRL,<sp/>&amp;data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>data<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>enable<sp/>)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>|=<sp/>(1&lt;&lt;4);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>&amp;=<sp/>~(1&lt;&lt;4);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_INT_CNTRL,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="light_8h_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a3063fd5cfc043ce2ac7c67f8af9b4b2e" kindref="member">apds9301_set_gain</ref>(<sp/>uint8_t<sp/>gain<sp/>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>data;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TIME,<sp/>&amp;data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>data<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>gain<sp/>!=<sp/>0,<sp/>high<sp/>gain<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>gain<sp/>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>|=<sp/>(1&lt;&lt;4);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>&amp;=<sp/>~(1&lt;&lt;4);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TIME,<sp/>data<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="light_8h_1a8e844b99f75ecdf6712faaaddc0eb396" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a8e844b99f75ecdf6712faaaddc0eb396" kindref="member">apds9301_read_control</ref>(<sp/>uint8_t*<sp/>data<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_CNTRL,<sp/>data,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*data<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="light_8h_1ae2c85da2e138447c5881122669c36a38" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1ae2c85da2e138447c5881122669c36a38" kindref="member">apds9301_write_threshold_low</ref>(<sp/>uint16_t<sp/>threshold<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TH_LL,<sp/>threshold<sp/>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="light_8h_1a67500fb59f0ab2f2e46c3b6f945985b5" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a67500fb59f0ab2f2e46c3b6f945985b5" kindref="member">apds9301_read_threshold_low</ref>(<sp/>uint16_t<sp/>*threshold<sp/>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TH_LL,<sp/>(uint8_t*)threshold,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*threshold<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="light_8h_1adb39e9954b4d948edea845453df2abf6" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1adb39e9954b4d948edea845453df2abf6" kindref="member">apds9301_write_threshold_high</ref>(<sp/>uint16_t<sp/>threshold<sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1a3b5f6dfe9cedb7ea92f9076cfc25c472" kindref="member">i2c_write</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TH_HL,<sp/>threshold<sp/>);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="light_8h_1a0005300d36508d20c372b5355d6546d9" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a0005300d36508d20c372b5355d6546d9" kindref="member">apds9301_read_threshold_high</ref>(<sp/>uint16_t<sp/>*threshold<sp/>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_TH_HL,<sp/>(uint8_t*)threshold,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*threshold<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="light_8h_1a6dbf3801330c345b999db86f018c94cf" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a6dbf3801330c345b999db86f018c94cf" kindref="member">apds9301_read_id</ref>(<sp/>uint8_t<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_ID,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>*</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="400"><highlight class="normal">}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="light_8h_1a14680b863ba54159dba03357d4745a16" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a14680b863ba54159dba03357d4745a16" kindref="member">apds9301_get_lux</ref>(<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*lux<sp/>)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ratio<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/>uint16_t<sp/>data0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/>uint16_t<sp/>data1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a96f9f9c1e4e86cc148aa0a334a399d8d" kindref="member">apds9301_read_data0</ref>(<sp/>&amp;data0<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a342a83b7263a75c5b12bffc638b2797e" kindref="member">apds9301_read_data1</ref>(<sp/>&amp;data1<sp/>);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>==<sp/>data0<sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ratio<sp/>=<sp/>(float)data1<sp/>/<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)data0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(0<sp/>&lt;<sp/>ratio)<sp/>&amp;&amp;<sp/>(0.50<sp/>&gt;=<sp/>ratio)<sp/>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*lux<sp/>=<sp/>0.0304*data0<sp/>-<sp/>0.062*data0*(pow(ratio,<sp/>1.4));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(0.50<sp/>&lt;<sp/>ratio)<sp/>&amp;&amp;<sp/>(0.61<sp/>&gt;=<sp/>ratio)<sp/>)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lux<sp/>=<sp/>0.0224*data0<sp/>-<sp/>0.031*data1;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(0.61<sp/>&lt;<sp/>ratio)<sp/>&amp;&amp;<sp/>(0.80<sp/>&gt;=<sp/>ratio)<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lux<sp/>=<sp/>0.0128*data0<sp/>-<sp/>0.0153*data1;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(0.80<sp/>&lt;<sp/>ratio)<sp/>&amp;&amp;<sp/>(1.30<sp/>&gt;=<sp/>ratio)<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lux<sp/>=<sp/>0.00146*data0<sp/>-<sp/>0.00112*data1;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>1.30<sp/>&lt;<sp/>ratio<sp/>)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*lux<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="light_8h_1a96f9f9c1e4e86cc148aa0a334a399d8d" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a96f9f9c1e4e86cc148aa0a334a399d8d" kindref="member">apds9301_read_data0</ref>(<sp/>uint16_t<sp/>*data<sp/>)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>low<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>high<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_DLOW_0,<sp/>&amp;low,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_DHIGH_0,<sp/>&amp;high,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>==<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>(<sp/>low<sp/>|<sp/>(high<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504" refid="light_8h_1a342a83b7263a75c5b12bffc638b2797e" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a342a83b7263a75c5b12bffc638b2797e" kindref="member">apds9301_read_data1</ref>(<sp/>uint16_t<sp/>*data<sp/>)</highlight></codeline>
<codeline lineno="505"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>low<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/>uint8_t<sp/>high<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_DLOW_1,<sp/>&amp;low,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>!=<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1aeecccc19faa9d25c282c0341631b7d2f" kindref="member">i2c_read</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_DHIGH_1,<sp/>&amp;high,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_CLEAN<sp/>==<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*data<sp/>=<sp/>(<sp/>low<sp/>|<sp/>(high<sp/>&lt;&lt;<sp/>8<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_ERROR;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EXIT_CLEAN;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="light_8h_1a163ea457431a4845d5ff5fa205f670b7" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a163ea457431a4845d5ff5fa205f670b7" kindref="member">apds9301_power</ref>(<sp/>uint16_t<sp/>on<sp/>)</highlight></codeline>
<codeline lineno="538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>on<sp/>)</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>power<sp/>on<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_CNTRL,<sp/><ref refid="light_8h_1a14cdc4396ca692461b59fb937003115b" kindref="member">POWER_ON</ref><sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>power<sp/>off<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1acf2df3bfc71068fc8d551eed2a6e7341" kindref="member">i2c_write_byte</ref>(<sp/>APDS9301_ADDRESS,<sp/>APDS9301_REG_CNTRL,<sp/>POWER_OFF<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>retVal;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="565" refid="light_8c_1a17b9e7a92cacdbc3b7220d968b204525" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="light_8c_1a17b9e7a92cacdbc3b7220d968b204525" kindref="member">cycle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmsg__t" kindref="compound">msg_t</ref><sp/>request<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><ref refid="structmsg__t" kindref="compound">msg_t</ref><sp/>response<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>&amp;request,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>request<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>mq_receive(<sp/>light_queue,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;request,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>request<sp/>),<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>receiving<sp/>from<sp/>message<sp/>queue<sp/>%s:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIGHT_QUEUE_NAME,<sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>request.id<sp/>)</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>REQUEST_STATUS:</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;(Light)<sp/>I<sp/>am<sp/>alive!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stdout,<sp/></highlight><highlight class="stringliteral">&quot;(Light)<sp/>I<sp/>am<sp/>alive!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response.id<sp/>=<sp/>request.id;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>response.info,<sp/></highlight><highlight class="stringliteral">&quot;(Light)<sp/>I<sp/>am<sp/>alive!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retVal<sp/>=<sp/>mq_send(<sp/>request.src,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;response,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>response<sp/>),<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_lock(<sp/>&amp;alive_mutex<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threads_status[THREAD_LIGHT]--;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pthread_mutex_unlock(<sp/>&amp;alive_mutex<sp/>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="light_8h_1a57d6c7de6874cb33b372559ea24ebb85" refkind="member"><highlight class="normal">mqd_t<sp/><ref refid="light_8c_1a57d6c7de6874cb33b372559ea24ebb85" kindref="member">get_light_queue</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>light_queue;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="628" refid="light_8h_1abafa0fdb40560c48e4b98ec10f0e1f43" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="light_8c_1abafa0fdb40560c48e4b98ec10f0e1f43" kindref="member">light_queue_init</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>unlink<sp/>first<sp/>in<sp/>case<sp/>we<sp/>hadn&apos;t<sp/>shut<sp/>down<sp/>cleanly<sp/>last<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/>mq_unlink(<sp/>LIGHT_QUEUE_NAME<sp/>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mq_attr<sp/>attr;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/>attr.mq_flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/>attr.mq_maxmsg<sp/>=<sp/>MAX_MESSAGES;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/>attr.mq_msgsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structmsg__t" kindref="compound">msg_t</ref><sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/>attr.mq_curmsgs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msg_q<sp/>=<sp/>mq_open(<sp/>LIGHT_QUEUE_NAME,<sp/>O_CREAT<sp/>|<sp/>O_RDWR,<sp/>0666,<sp/>&amp;attr<sp/>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>msg_q<sp/>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>creating<sp/>message<sp/>queue<sp/>%s:<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LIGHT_QUEUE_NAME,<sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>msg_q;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="light_8h_1a1a3ec39083c9a030ae43f0e8bd3ea71d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="light_8c_1a1a3ec39083c9a030ae43f0e8bd3ea71d" kindref="member">light_fn</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*thread_args<sp/>)</highlight></codeline>
<codeline lineno="663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>time<sp/>that<sp/>thread<sp/>was<sp/>spawned<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>time;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;time);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/>shm<sp/>=<sp/><ref refid="common_8c_1ae426f169cff2eb748a7d509bda02c686" kindref="member">get_shared_memory</ref>();</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>initial<sp/>state<sp/>to<sp/>shared<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!<sp/>Start<sp/>Time:<sp/>%ld.%ld<sp/>secs\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.tv_sec,<sp/>time.tv_nsec<sp/>);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Signal<sp/>to<sp/>logger<sp/>that<sp/>shared<sp/>memory<sp/>has<sp/>been<sp/>updated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/>signal(SIGUSR1,<sp/><ref refid="light_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/>signal(SIGUSR2,<sp/><ref refid="light_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>light_queue<sp/>=<sp/><ref refid="light_8c_1abafa0fdb40560c48e4b98ec10f0e1f43" kindref="member">light_queue_init</ref>();</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>0<sp/>&gt;<sp/>light_queue<sp/>)</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>EXIT_INIT<sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retVal<sp/>=<sp/><ref refid="i2c_8c_1a1554411301103619aa6f40b7613b5e6b" kindref="member">i2c_init</ref>(<sp/>&amp;i2c_apds9301<sp/>);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>EXIT_INIT<sp/>==<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Failed<sp/>to<sp/>initialize<sp/>I2C<sp/>for<sp/>light<sp/>sensor!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>EXIT_INIT<sp/>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/>retVal<sp/>=<sp/><ref refid="light_8c_1a163ea457431a4845d5ff5fa205f670b7" kindref="member">apds9301_power</ref>(<sp/><ref refid="light_8h_1a14cdc4396ca692461b59fb937003115b" kindref="member">POWER_ON</ref><sp/>);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>retVal<sp/>)</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a8f714d490a7f06c3a43cfea239e2770f" kindref="member">print_header</ref>(shm-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>shm-&gt;buffer,<sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Failed<sp/>to<sp/>power<sp/>on<sp/>light<sp/>sensor!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>EXIT_INIT<sp/>);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><ref refid="common_8c_1a78dd395e9020e2a6066233a529bff7be" kindref="member">timer_setup</ref>(<sp/>&amp;timerid,<sp/>&amp;<ref refid="light_8c_1a4f3aa3fb3750262d938e191252db81fb" kindref="member">timer_handler</ref><sp/>);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><ref refid="common_8c_1a207644f53334379d5fcb82b78bafff36" kindref="member">timer_start</ref>(<sp/>&amp;timerid,<sp/>5000000<sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><ref refid="light_8c_1a17b9e7a92cacdbc3b7220d968b204525" kindref="member">cycle</ref>();</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="712"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/baquerrj/boulder/ecen5013/project_1/src/light.c"/>
  </compounddef>
</doxygen>
