<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="logger_8c" kind="file" language="C++">
    <compoundname>logger.c</compoundname>
    <includes refid="led_8h" local="yes">led.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">time.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">signal.h</includes>
    <includes local="no">fcntl.h</includes>
    <includes local="no">sys/syscall.h</includes>
    <includes local="no">sys/mman.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">sys/stat.h</includes>
    <incdepgraph>
      <node id="182">
        <label>sys/stat.h</label>
      </node>
      <node id="180">
        <label>sys/mman.h</label>
      </node>
      <node id="177">
        <label>stdlib.h</label>
      </node>
      <node id="174">
        <label>errno.h</label>
      </node>
      <node id="178">
        <label>fcntl.h</label>
      </node>
      <node id="173">
        <label>mqueue.h</label>
      </node>
      <node id="168">
        <label>common.h</label>
        <link refid="common_8h"/>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>/home/baquerrj/boulder/ecen5013/project_1/src/logger.c</label>
        <link refid="logger_8c"/>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
      </node>
      <node id="170">
        <label>pthread.h</label>
      </node>
      <node id="181">
        <label>sys/types.h</label>
      </node>
      <node id="175">
        <label>string.h</label>
      </node>
      <node id="171">
        <label>unistd.h</label>
      </node>
      <node id="172">
        <label>semaphore.h</label>
      </node>
      <node id="169">
        <label>signal.h</label>
      </node>
      <node id="167">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="168" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>time.h</label>
      </node>
      <node id="179">
        <label>sys/syscall.h</label>
      </node>
      <node id="166">
        <label>stdio.h</label>
      </node>
      <node id="165">
        <label>led.h</label>
        <link refid="led_8h"/>
        <childnode refid="166" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="logger_8c_1a3dfce1828c167eae81a00615b18296df" prot="public" static="no" mutable="no">
        <type>struct itimerspec</type>
        <definition>struct itimerspec trigger</definition>
        <argsstring></argsstring>
        <name>trigger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" line="662" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="logger_8c_1ad033d05e078fa433531dcadea106749f" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* log</definition>
        <argsstring></argsstring>
        <name>log</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" line="38" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="logger_8c_1a0595a9426215e130f99f34805ad48965" prot="public" static="yes" mutable="no">
        <type><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref> *</type>
        <definition>shared_data_t* shm</definition>
        <argsstring></argsstring>
        <name>shm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" line="39" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="logger_8c_1a366471b5822de7615f33cbe5eab9726a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void sig_handler</definition>
        <argsstring>(int signo)</argsstring>
        <name>sig_handler</name>
        <param>
          <type>int</type>
          <declname>signo</declname>
        </param>
        <briefdescription>
<para>Signal handler for logger thread. On normal operation, we should be receving SIGUSR1/2 signals from watchdog when prompted to exit. So, we close the message queue and timer this thread owns. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: sig_handler <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signo</parametername>
</parameternamelist>
<parameterdescription>
<para>- enum with signal number of signal being handled <heading level="1">void </heading>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" line="52" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" bodystart="52" bodyend="65"/>
        <referencedby refid="logger_8h_1aab6cd4e66af04ba25724dcf4b19d56ef" compoundref="logger_8c" startline="78" endline="131">logger_fn</referencedby>
      </memberdef>
      <memberdef kind="function" id="logger_8c_1a18e66c89d9fc8c03976de6745e8a3077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* logger_fn</definition>
        <argsstring>(void *arg)</argsstring>
        <name>logger_fn</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Entry point for logger thread. </para>        </briefdescription>
        <detaileddescription>
<para>================================================================================= Function: logger_fn <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>thread_args</parametername>
</parameternamelist>
<parameterdescription>
<para>- void ptr to arguments used to initialize thread </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL - We don&apos;t really exit from this function, <heading level="1">since the exit point is <ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit()</ref> </heading>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" line="78" column="1" bodyfile="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c" bodystart="78" bodyend="131"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Takes care of logging for other threads. </para>    </briefdescription>
    <detaileddescription>
<para>=================================================================================</para><para>This logger works in background to log the state of other threads to a common file. It is responsible for reading the shared memory segment written to by the sensor threads. It sleeps waiting for a semaphore to be posted by another thread signaling that new data has been written to shared memory and that it should read it.</para><para><simplesect kind="author"><para>Roberto Baquerizo (baquerrj), <ulink url="mailto:roba8460@colorado.edu">roba8460@colorado.edu</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="24"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="led_8h" kindref="compound">led.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/syscall.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/mman.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">itimerspec<sp/>trigger;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE<sp/>*log;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>*shm;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="logger_8c_1a366471b5822de7615f33cbe5eab9726a" refkind="member"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="logger_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signo<sp/>)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>signo<sp/>==<sp/>SIGUSR1<sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Received<sp/>SIGUSR1!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>signo<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>signo<sp/>==<sp/>SIGUSR2<sp/>)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Received<sp/>SIGUSR2!<sp/>Exiting...\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="common_8c_1a760f8eb17501e01a6673e2ec911ba1cb" kindref="member">thread_exit</ref>(<sp/>signo<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="logger_8h_1aab6cd4e66af04ba25724dcf4b19d56ef" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="logger_8c_1a18e66c89d9fc8c03976de6745e8a3077" kindref="member">logger_fn</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*arg<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timespec<sp/>time;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/>clock_gettime(CLOCK_REALTIME,<sp/>&amp;time);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>failure<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>signal(SIGUSR1,<sp/><ref refid="logger_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>signal(SIGUSR2,<sp/><ref refid="logger_8c_1a366471b5822de7615f33cbe5eab9726a" kindref="member">sig_handler</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>thread<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>arg<sp/>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>requires<sp/>name<sp/>of<sp/>log<sp/>file!\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit(&amp;failure);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>log<sp/>=<sp/>(FILE<sp/>*)arg;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>log<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>perror(<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>opening<sp/>log<sp/>file&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pthread_exit(&amp;failure);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/>shm<sp/>=<sp/><ref refid="common_8c_1ae426f169cff2eb748a7d509bda02c686" kindref="member">get_shared_memory</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>shm<sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>memory<sp/>mapping<sp/>shared<sp/>memory:<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>*buf<sp/>=<sp/>malloc(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structshared__data__t" kindref="compound">shared_data_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>buf<sp/>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum<sp/>=<sp/>errno;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>stderr,<sp/></highlight><highlight class="stringliteral">&quot;Encountered<sp/>error<sp/>allocating<sp/>memory<sp/>for<sp/>local<sp/>buffer<sp/>%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strerror(<sp/>errnum<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_wait(&amp;shm-&gt;r_sem);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>buf,<sp/>shm,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*shm)<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(<sp/>log,<sp/></highlight><highlight class="stringliteral">&quot;%s\n%s&quot;</highlight><highlight class="normal">,<sp/>buf-&gt;<ref refid="structshared__data__t_1aac4f21bda7f4fc47557faac246f0b3ea" kindref="member">header</ref>,<sp/>buf-&gt;buffer<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(<sp/>log<sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="led_8c_1ad5a256395c8cd67d2a9f9ff1abfd6d2a" kindref="member">led_toggle</ref>(<sp/>LED3_BRIGHTNESS<sp/>);<sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_post(&amp;shm-&gt;<ref refid="structshared__data__t_1aaa7bbb7121ee6cebe671dd6e2efb7763" kindref="member">w_sem</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/baquerrj/boulder/ecen5013/project_1/src/logger.c"/>
  </compounddef>
</doxygen>
